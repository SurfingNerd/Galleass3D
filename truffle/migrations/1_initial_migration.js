//const Migrations = artifacts.require("Migrations");


// const Web3 = require('web3');
// const web3 = new Web3();

const Registry = artifacts.require("WorldsRegistry");
const Galleass =  artifacts.require("Galleass");



//todo: some of the parameters might be calculatable out of the raw transaction.
async function deployWithDeterministicAddress(payingAccount, expectedContractAddress, singleUsedCreatorAddress, gasCosts, rawTx) {

  // deploying a contract with a static adress.
  // see: https://eips.ethereum.org/EIPS/eip-1820

  const gotCode = await web3.eth.getCode(expectedContractAddress);

  if (gotCode === '0x') {
    // contract does not exist, deploy new.
    console.log('transfering funds for single use account');
    await web3.eth.sendTransaction({ from: payingAccount,  to: singleUsedCreatorAddress, value: gasCosts})
    console.log('creating contract');
    const introspectionResult = await web3.eth.sendSignedTransaction(rawTx);
    console.log('contract got deployed: ', introspectionResult.contractAddress);

    if (introspectionResult.contractAddress.toLowerCase() !== expectedContractAddress.toLowerCase()) {
      console.error('MISSMATCH: the expected contract Address did not match the actual contract Address');
    }

  } else {
    console.log('skipping: contract already exists');
  }
}

async function deployEip1820(payingAccount) {

  //deploy pseudo-introspection Registry Contract.
  // see: https://eips.ethereum.org/EIPS/eip-1820
  const expectedContractAddress = '0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24';
  const singleUsedCreatorAddress = '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96';
  const gasCosts = web3.utils.toHex('80000000000000000');
  const rawTx = '0xf90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820'
  
  await deployWithDeterministicAddress(payingAccount, expectedContractAddress, singleUsedCreatorAddress, gasCosts, rawTx)
}


// async function deployWorldRegisty(payingAccount) {

//   //17b3e768bbf07ae677d148307c4fe19fa0d8499982c5
//   const rawTx = '0xf9099601843b9aca00837a11ff8080b9094460806040526100126100d260201b60201c565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36100da565b600033905090565b61085b806100e96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637dacfe651161005b5780637dacfe65146101895780638da5cb5b146101d35780638f32d59b1461021d578063f2fde38b1461023f57610088565b806308dcb3871461008d578063274ad472146100ab5780636ed9965214610119578063715018a61461017f575b600080fd5b610095610283565b6040518082815260200191505060405180910390f35b6100d7600480360360208110156100c157600080fd5b8101908080359060200190929190505050610289565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101656004803603604081101561012f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506102bc565b604051808215151515815260200191505060405180910390f35b610187610448565b005b610191610581565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101db6105a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102256105d0565b604051808215151515815260200191505060405180910390f35b6102816004803603602081101561025557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061062e565b005b60025481565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006102c66105d0565b610338576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8160028190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817fcb951ea66b714a5ca1665fdeb8d08ae6f3d4b8509674660e370754c20f170bbb8442604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a26001905092915050565b6104506105d0565b6104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106126106b4565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6106366105d0565b6106a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6106b1816106bc565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610742576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806108016026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a265627a7a72315820229d074eb6b159fa85aab05122549bf02ed24bade920cc46d7e92ae514a7e83164736f6c634300050d00321ba046987e010024f537864bb3cd43e98222aec52711b9d220295753bd6a154a99b3a03432b70e82d797fdc57617b3e768bbf07ae677d148307c4fe19fa0d8499982c6';
//   const expectedContractAddress = '0x1820a4b7618bde71dce8cdc73aab6c95905fad23';
//   const singleUsedCreatorAddress = '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96';
//   const gasCosts = web3.utils.toHex('80000000000000000');
//   await deployWithDeterministicAddress(payingAccount, expectedContractAddress, singleUsedCreatorAddress, gasCosts, rawTx)
// }

module.exports = async function(deployer) {
  //deployer.deploy(Migrations);
  //console.log('start Deploy...');
  const __deployer = deployer;

  var accounts = await web3.eth.getAccounts();
  var deploymentAccount = accounts[0];

  console.log('deploying main contract with account:' + deploymentAccount); 

  await deployEip1820(accounts[0]);

  //TODO: Find out how to convient use CREATE2 in order to deploy to a static address.
  //await deployWorldRegisty(accounts[0]);

  //return;

  //console.log('Registry: ', new Registry());
  

  

  //var registry = await Registry.at('0x6EB0fadc34060AF5EfB053b4cB413CE5809b6f16');
  var registry = await deployer.deploy(Registry);
  console.log('deployed a WorldRegistry at ' + registry.address);

  var galleas = await deployer.deploy(Galleass);
  console.log('first Galleas world deployed at ' + galleas.address);

  await registry.registerGalleasWorld.sendTransaction(galleas.address, web3.utils.fromAscii('Root World'));

  var seconds = Math.round(new Date() / 1000);

  var secondsSinceGameBirth = seconds - 1556310063;

  console.log('seconds: ' + seconds);

  //await registry.registerGalleasWorld.sendTransaction(galleas.address, deploymentAccount, web3.utils.fromAscii('test - world sec:' + secondsSinceGameBirth));
  //const __mainContract = galleas;
  //const var gallAddr = Galleass.address;

  async function deployContract(contractName){
    console.log('Deploying ' + contractName + ' with Galleass Address ' + galleas.address);
    const contractArtifact = artifacts.require(contractName);
    const deployedContract = await deployer.deploy(contractArtifact, galleas.address);
    const setContractResult = await galleas.setContract.sendTransaction(web3.utils.fromAscii(contractName), deployedContract.address);
    if (setContractResult) {
      deployedContract.contractName = contractName;
      return deployedContract;
    } else {
      return null;
    }
  }

  async function setPermission(contract, permissionName) {
    
    console.log("setting " + contract.address + " " + contract.contractName + " permission:" + permissionName);

    // function setPermission(address _contract, bytes32 _permission, bool _value) 
    var setPermissionResult = await galleas.setPermission(contract.address, web3.utils.fromAscii(permissionName), true);
   
    if (!setPermissionResult.receipt.status) {
      console.error("FAILED: setting " + contract.address + " " + contract.contractName + " permission:" + permissionName);
    }
  }

  const timber = await deployContract('Timber');
  const fillet = await deployContract('Fillet');
  const dogger = await deployContract('Dogger');
  const copper = await deployContract('Copper');
  const bay = await deployContract('Bay');
  const citizen = await deployContract('Citizens');
  const citizenLib = await deployContract('CitizensLib');
  const land = await deployContract('Land');
  const timberCamp = await deployContract('TimberCamp');
  const landLib = await deployContract('LandLib');
  const harbor = await deployContract('Harbor');
  const fishMonger = await deployContract('Fishmonger');
  const village = await deployContract('Village');
  const market = await deployContract('Market');
  const sea = await deployContract('Sea');
  const catfish = await deployContract('Catfish');

  setPermission(bay, 'transferDogger');
  setPermission(bay, 'updateExperience');

  setPermission(landLib, 'useCitizens');
  setPermission(landLib, 'mintTimber');
  setPermission(landLib, 'mintStone');
  setPermission(landLib, 'mintGreens');
  setPermission(landLib, 'transferStone');
  setPermission(landLib, 'transferGreens');
  setPermission(landLib, 'transferTimber');

  setPermission(timberCamp, 'mintTimber');


  setPermission(harbor, 'buildDogger');
  setPermission(harbor, 'buildSchooner');
  setPermission(harbor, 'updateExperience');
  setPermission(harbor, 'embarkShips');
  
  
  setPermission(fishMonger, 'transferFish');
  setPermission(fishMonger, 'mintFillet');
  setPermission(fishMonger, 'updateExperience');


  setPermission(village, 'createCitizens');

  setPermission(citizenLib, 'transferFood');


  setPermission(market, 'transferTimber');

  catfish.mint.sendTransaction(deploymentAccount, 10);
  

  //console.log(copper);

  // console.log('Generating  Land...');
  // await landLib.generateLand.sendTransaction();



  // const fs = require('fs');
  // fs.writeFile("./build/latestGalleasAddress.txt", galleas.address, function(err) {
  //   if(err) {
  //       return console.log(err);
  //   }

  //   console.log("latest Galleass address written to: build/latestGalleasAddress.txt");
  // }); 
  // galleas.address

};
